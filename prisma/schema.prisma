// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            Int     @id @default(autoincrement())
  email         String  @unique
  name          String
  phone_number  String
  address       String?
  refresh_token String?
  role          Role    @default(USER)

  password String

  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  stories       Story[]
  comments      Comment[]
  userLikeStory UserLikeStory[]
}

model Region {
  id   Int    @id @default(autoincrement())
  name String

  shops     Shop[]
  stories   Story[]
  provinces Province[]
}

model Province {
  id   Int    @id @default(autoincrement())
  name String

  region_id Int
  regions   Region  @relation(fields: [region_id], references: [id])
  shops     Shop[]
}

model Shop {
  id           Int    @id @default(autoincrement())
  name         String
  image        String
  description  String
  address      String
  phone_number String

  status Status @default(PENDING)

  rating Float?

  region_id Int?
  region   Region? @relation(fields: [region_id], references: [id])

  province_id Int
  province   Province @relation(fields: [province_id], references: [id])

  shopFoods ShopFood[]
}

model ShopFood {
  id     Int   @id @default(autoincrement())
  food String

  shop   Shop  @relation(fields: [shop_id], references: [id])
  shop_id Int
}

model Story {
  id             Int    @id @default(autoincrement())
  featured_image String
  title          String
  description    String
  content        String
  cooking_method String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user     User      @relation(fields: [user_id], references: [id])
  user_id  Int
  comments Comment[]

  status Status @default(PENDING)
  views  Int    @default(0)

  region_id Int
  region    Region @relation(fields: [region_id], references: [id])

  userLikeStory UserLikeStory[]
}

model UserLikeStory {
  id       Int   @id @default(autoincrement())
  user     User  @relation(fields: [user_id], references: [id])
  user_id  Int
  story    Story @relation(fields: [story_id], references: [id])
  story_id Int
}

model Comment {
  id                Int      @id @default(autoincrement())
  comment_content   String
  comment_timestamp DateTime @default(now())
  user              User     @relation(fields: [user_id], references: [id])
  user_id           Int
  story             Story    @relation(fields: [story_id], references: [id])
  story_id          Int
}

enum Role {
  ADMIN
  USER
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}
